https://adventofcode.com/2020/day/8

Дополнительно к ознакомлению

https://www.youtube.com/watch?v=VLAe_qy5seU&t=4s
рекурсия

--- День 8: Ручная остановка ---
Ваш рейс до крупного узла авиакомпании достигает крейсерской высоты без происшествий.
Пока вы раздумываете о том, чтобы проверить бортовое меню в поисках одного из тех напитков,
которые идут в комплекте с маленьким зонтиком, вас прерывает ребенок, сидящий рядом с вами.

Их портативная игровая консоль не включается! Они спрашивают, можно ли посмотреть.

Вы сужаете проблему до странного бесконечного цикла в загрузочном коде
(ваш ввод головоломки) устройства. Вы сможете это исправить, но сначала
вам нужно иметь возможность запускать код изолированно.

Загрузочный код представлен в виде текстового файла с одной инструкцией
на строку текста. Каждая инструкция состоит из операции ( acc, jmpили nop)
и аргумента (числа со знаком, например +4или -20).

    acc увеличивает или уменьшает одно глобальное значение, называемое аккумулятором ,
на значение, указанное в аргументе. Например, acc +7увеличит аккумулятор на 7.
Аккумулятор начинается с 0. После acc инструкции следующей выполняется инструкция,
находящаяся непосредственно под ней.
    jmp переходит к новой инструкции относительно себя. Следующая инструкция для
выполнения находится с использованием аргумента как смещения от jmpинструкции;
например, jmp +2пропустит следующую инструкцию, jmp +1перейдет к инструкции,
находящейся непосредственно под ней, и jmp -20приведет к выполнению следующей
инструкции, расположенной на 20 строк выше.
    nop означает «Нет ОПЕРАЦИИ» — он ничего не делает.
Следующей выполняется инструкция, находящаяся непосредственно под ней.

Например, рассмотрим следующую программу:

nop +0
acc +1
jmp +4
acc +3
jmp -3
acc -99
acc +1
jmp -4
acc +6

Эти инструкции выполняются в следующем порядке:

nop +0  | 1
acc +1  | 2, 8(!)
jmp +4  | 3
acc +3  | 6
jmp -3  | 7
acc -99 |
acc +1  | 4
jmp -4  | 5
acc +6  |


Во-первых, nop +0ничего не делает. Затем значение аккумулятора увеличивается
с 0 до 1 ( acc +1) и jmp +4следующая инструкция устанавливается
на другую acc +1внизу. После того, как он увеличит значение
аккумулятора с 1 до 2, jmp -4выполняется, устанавливая для следующей
инструкции единственный acc +3. Он устанавливает аккумулятор на 5 и jmp -3
заставляет программу продолжить работу с первого значения acc +1.

Это бесконечный цикл : при такой последовательности переходов программа будет работать вечно.
В тот момент, когда программа пытается выполнить какую-либо
инструкцию во второй раз, вы знаете, что она никогда не завершится.

Непосредственно перед тем, как программа выполнит инструкцию во второй раз,
значение в аккумуляторе равно 5.

Запустите копию загрузочного кода. Какое значение находится в аккумуляторе
непосредственно перед повторным выполнением какой-либо команды ?

Часть 2.

После тщательного анализа вы считаете, что повреждена ровно одна инструкция .

Где-то в программе либо a jmp должно быть a nop, либо a nop должно быть a jmp.
(Ни одна acc инструкция не пострадала в результате повреждения этого загрузочного кода.)

Предполагается, что программа завершается при попытке выполнить инструкцию
сразу после последней инструкции в файле . Изменив ровно один jmpили nop,
вы можете восстановить загрузочный код и обеспечить его корректное завершение.

Например, рассмотрим ту же программу сверху:

nop +0
acc +1
jmp +4
acc +3
jmp -3
acc -99
acc +1
jmp -4
acc +6

Если вы измените первую инструкцию с nop +0на jmp +0, это создаст бесконечный
цикл с одной инструкцией, никогда не покидающий эту инструкцию.
Если вы измените почти любую jmp инструкцию, программа все равно в конечном
итоге найдет другую jmp инструкцию и зациклится навсегда.

Однако если вы измените предпоследнюю инструкцию (с jmp -4на nop -4),
программа завершится! Инструкции посещаются в таком порядке:

nop +0  | 1
acc +1  | 2
jmp +4  | 3
acc +3  |
jmp -3  |
acc -99 |
acc +1  | 4
nop -4  | 5
acc +6  | 6

После последней инструкции ( acc +6) программа завершается, пытаясь выполнить команду,
расположенную ниже последней инструкции в файле. При этом изменении после завершения
программы аккумулятор будет содержать значение 8( acc +1, acc +1, acc +6).

Исправьте программу так, чтобы она нормально завершалась, изменяя ровно одну jmp(на nop)
или nop(to jmp). Каково значение аккумулятора после завершения программы?


